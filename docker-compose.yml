volumes:
  database-volume:

networks:
  mynetwork:

services:
  nginx:
    image: nginx:stable-alpine
    container_name: server
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - database
      - backend
      - frontend
    restart: always
    networks:
      - mynetwork

  database:
    image: postgres
    container_name: database
    restart: always
    volumes:
      - database-volume:/var/lib/postgresql/data
      - ./backend/scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - mynetwork

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8080:8080"
    env_file: ./.env
    volumes:
      - ./backend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
      - URL=$URL
      - DB_HOST=database
      - DB_USER=$POSTGRES_USER
      - DB_PASSWORD=$POSTGRES_PASSWORD
      - DB_NAME=$POSTGRES_DB
      - DB_PORT=$POSTGRES_PORT
      - ACCESS_TOKEN_SECRET=$ACCESS_TOKEN_SECRET
    depends_on:
      database:
        condition: service_healthy
    networks:
      - mynetwork

  frontend:
    image: frontend:0.0.1
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - /app/node_modules
      - ./frontend:/app
    networks:
      - mynetwork
